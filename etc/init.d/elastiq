#!/bin/bash
#
# elastiq       Starts and stops the elastiq queue monitor
#
# chkconfig:    2345 99 09
# description:  Control script for starting/stopping elastiq-real.py.
#

### BEGIN INIT INFO
# Provides:          elastiq
# Required-Start:
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Starts and stops the elastiq queue monitor
# Description:       Control script for starting/stopping elastiq-real.py.
### END INIT INFO

#
# Init
#

# Source function library
[[ -e /lib/lsb/init-functions ]] && . /lib/lsb/init-functions

# Get this script's name
Prog=`readlink -e "$0"`
cd `dirname "$Prog"`
Prog=`basename "$0"`

# Lock file name
LockFile='/var/lock/subsys/elastiq'

# Log files directory
elastiqLogDir='/var/log/elastiq'

# Log file
elastiqLogFile="${elastiqLogDir}/elastiq.log"

# State file directory
elastiqStateFile='/var/lib/elastiq/state'

# PID file
elastiqPidFile='/var/run/elastiq.pid'

# User
elastiqUser='elastiq'

# Find first existing file in the given list. Files support spaces in the name
function FindFirst() (
  local F
  for F in "$@" ; do
    if [[ -r "$F" ]] ; then
      echo "$F"
      return 0
    fi
  done
  return 1
)

# # Permissions for logfile dir
# mkdir -p "$elastiqLogFileDir" 2> /dev/null
# chown "$elastiqUser" "$elastiqLogFileDir" 2> /dev/null
# chmod 0770 "$elastiqLogFileDir" 2> /dev/null  # might contain sensitive data
# touch "$elastiqLogFileDir"/.test 2> /dev/null
# if [[ $? != 0 ]] ; then
#   echo "Cannot access log directory $elastiqLogFileDir" >&2
#   exit 3
# fi
# rm -f "$elastiqLogFileDir"/.test

# # Permissions for statefile dir
# mkdir -p $( dirname "$elastiqStateFile" ) 2> /dev/null
# chown "$elastiqUser" "$elastiqStateFile" 2> /dev/null
# chmod 0600 "$elastiqStateFile" 2> /dev/null


#
# Echo functions
#

# check if a shell function exists: returns 0 if it does, 1 if it does not
function function_exists() (
  declare -fF "$1" > /dev/null 2>&1
  return $?
)

# echo at the beginning of an action
function echo_begin() (
  if function_exists 'log_begin_msg' ; then
    log_begin_msg "$1"
  else
    echo -n "${1}:"
  fi
  return 0
)

# echo on success at the end of an action
function echo_success() (
  if function_exists 'log_success_msg' ; then
    function_exists 'log_begin_msg' || echo -e -n '\r'
    log_success_msg "$1"
  else
    echo -e -n '\r'
    echo "${1}: OK"
  fi
  return 0
)

# echo on failure at the end of an action
function echo_failure() (
  if function_exists 'log_failure_msg' ; then
    function_exists 'log_begin_msg' || echo -e -n '\r'
    log_failure_msg "$1"
  else
    echo -e -n '\r'
    echo "${1}: FAILED"
  fi
  return 0
)

# automatically pick success/failure depending on the exit code
function echo_end() (
  if [[ $1 == 0 ]] ; then
    echo_success "$2"
  else
    echo_failure "$2"
  fi
)

#
# Functions
#


# Start elastiq
function start() {
  local ret
  local stateDir
  local lastMsg

  echo_begin "Starting ${Prog}"

  # Permissions for the state file
  stateDir="$( dirname "$elastiqStateFile" )"
  mkdir -p "$stateDir"
  chmod 0700 "$stateDir"
  chown "$elastiqUser" "$stateDir"
  if [[ -e "$elastiqStateFile" ]] ; then
    chown "$elastiqUser" "$elastiqStateFile"
    chmod 0600 "$elastiqStateFile"
  fi

  # Permissions for the log directory
  mkdir -p "$elastiqLogDir"
  chmod -R u=rwX,g=,o= "$elastiqLogDir"
  chown -R "$elastiqUser" "$elastiqLogDir"

  # Permissions for the PIDfile
  touch "$elastiqPidFile"
  chmod 0700 "$elastiqPidFile"
  chown "$elastiqUser" "$elastiqPidFile"

  # Finally start
  sudo -u "$elastiqUser" elastiqctl start > /dev/null 2>&1

  lastMsg=`query_status`
  ret=$?

  if [[ $ret == 0 ]] ; then
    touch "$LockFile"
    chown "$elastiqUser" "$LockFile"
  fi

  echo_end $ret "Starting ${Prog}: ${lastMsg}"

  return $ret
}

# Stop elastiq
function stop() {
  local ret
  local lastMsg

  echo_begin "Stopping ${Prog}"
  sudo -u "$elastiqUser" elastiqctl stop > /dev/null 2>&1

  # note: query_status "fails" (1) if daemon is stoped: this is a success here
  lastMsg=`query_status`
  ret=$(( ! $? ))

  [[ $ret == 0 ]] && rm -f "$LockFile"

  echo_end $ret "Stopping ${Prog}: ${lastMsg}"

  return $ret
}

# Echo status
function status() {
  local ret
  local lastMsg

  lastMsg=`query_status`
  ret=$?

  if [[ $ret == 0 ]] ; then
    echo_success "$lastMsg"
  else
    echo_failure "$lastMsg"
  fi

  return $ret
}

# Query status: echoes a message and returns 0 if running, nonzero if not
function query_status() {
  local ret
  sudo -u "$elastiqUser" elastiqctl status > /dev/null 2>&1
  ret=$?
  if [[ $ret == 0 ]] ; then
    echo "${Prog} running with PID $(cat "$elastiqPidFile")"
  else
    echo "${Prog} not running"
  fi
  return $ret
}

# Print configuration
function print_conf() {
  echo "Python     : $( which python ) ($( python --version 2>&1 ))"
  echo "PYTHONPATH : ${PYTHONPATH}"
}

# Entry point
case "$1" in

  start)
    start
    exit $?
  ;;

  stop)
    stop
    exit $?
  ;;

  status)
    status
    exit $?
  ;;

  restart)
    stop && start
    exit $?
  ;;

  log)
    status
    [[ -e "$elastiqLogFile" ]] && tail -f "$elastiqLogFile"
    exit $?
  ;;

  conf)
    print_conf
    exit $?
  ;;

  *)
    echo "Usage: $Prog [start|stop|status|restart|log|conf]"
    exit 1
  ;;

esac
