#!/bin/bash
#
# Author: Dario Berzano <dario.berzano@cern.ch> -- http://github.com/dberzano/virtual-analysis-facility
#
# elastiq:      Starts and stops the elastiq HTCondor queue monitor
#
# chkconfig: - 99 09
# description:  Control script for starting/stopping elastiq.py using \
#               proper environment. Requires SLC6 (or RHEL6-compat) \
#               with CVMFS: uses Python v2.7 from there.
#
### BEGIN INIT INFO
# Provides: elastiq
# Required-Start:
# Default-Stop: 0 1 6
# Short-Description: Starts the Name Switch Cache Daemon
# Description:  Control script for starting/stopping elastiq.py.
### END INIT INFO

#
# Init
#

# Source function library.
. /etc/init.d/functions

Prog=`readlink -e "$0"`
cd `dirname "$Prog"`
Prog=`basename "$0"`

# Find first existing file in the given list. Files support spaces in the name.
function FindFirst() {
  local F
  for F in "$@" ; do
    if [ -r "$F" ] ; then
      echo "$F"
      return 0
    fi
  done
  return 1
}

# Load environment
elastiqDefault=$( FindFirst "$HOME/.elastiq.default" "/etc/default/elastiq" "/etc/sysconfig/elastiq" )
if [ "$elastiqDefault" == '' ] ; then
  echo 'Cannot find startup configuration file' >&2
  exit 2
fi
source "$elastiqDefault"

Lock='/var/lock/subsys/elastiq'

# Default control variables
export elastiqScreenName='__|elastiq|__'
export elastiqRealBin=$( FindFirst "$PWD/elastiq.py" '/usr/bin/elastiq.py' )
export elastiqCommand="python $elastiqRealBin"
export elastiqLogFileDir=${elastiqLogFileDir:-/var/log/elastiq}  # defaults to syswide path
export elastiqLogFile="${elastiqLogFileDir}/elastiq.log"
export elastiqUser=${elastiqUser:-elastiq}  # defaults to 'elastiq'

# Permissions for logfile dir
mkdir -p "$elastiqLogFileDir" 2> /dev/null
chown "$elastiqUser" "$elastiqLogFileDir" 2> /dev/null
chmod 0700 "$elastiqLogFileDir" 2> /dev/null  # might contain sensitive data
touch "$elastiqLogFileDir"/.test
if [ $? != 0 ] ; then
  echo "Cannot access log directory $elastiqLogFileDir" >&2
  exit 3
fi
rm -f "$elastiqLogFileDir"/.test

#
# Functions
#

# Stop elastiq
function stop() {

  # Kill elastiq
  echo -n "Stopping $Prog: "
  local Signal='15'
  local LastMsg
  while true ; do
    LastMsg=`status` || break
    status 2> /dev/null  # for pid
    kill -$Signal $Pid 2> /dev/null
    sleep 1
    kill -0 $Pid 2> /dev/null && Signal=9
  done

  # Clean dangling screen
  screen -ls | grep -q "$elastiqScreenName" 2> /dev/null && \
    screen -S "$elastiqScreenName" -X quit
  screen -wipe > /dev/null 2>&1

  echo -n "$LastMsg"
  rm -f "$Lock"
  success
  echo ''

  return 0

}

# Query status
function status() {
  local Out
  Out=$( ps -e -o pid,command | grep " ${elastiqCommand}$" | grep -v SCREEN )
  if [ "$Out" == '' ] ; then
    export Pid=''
    echo "$Prog not running"
    return 1
  else
    export Pid=$(echo $Out | awk '{ print $1 }')
    echo "$Prog running with PID $Pid"
    return 0
  fi
}

# Enter elastiq screen
function enter_screen() {
  if status ; then
    screen -r "$elastiqUser/$elastiqScreenName"
    return $?
  fi
  return 1
}

# Start elastiq
function start() {
  echo -n "Starting $Prog: "
  local Rv=0
  local LastMsg
  LastMsg=`status`
  if [ $? != 0 ] ; then

    # Switching to unprivileged
    if [ `whoami` == 'root' ] ; then
      Cmd="su $elastiqUser -s /bin/sh -c"
    else
      Cmd="/bin/sh -c"
    fi
    $Cmd "screen -dmS \"$elastiqScreenName\" $elastiqCommand" > /dev/null 2>&1
    $Cmd "screen -S \"$elastiqScreenName\" -X multiuser on"
    $Cmd "screen -S \"$elastiqScreenName\" -X acladd root"

    sleep 1
    LastMsg=`status`
    Rv=$?
  fi
  echo -n "$LastMsg"
  if [ $Rv == 0 ] ; then
    touch "$Lock" 2> /dev/null
    chown "$elastiqUser" "$Lock"
    success
  else
    failure
  fi
  echo ''
  return $Rv
}

# Print configuration
function print_conf() {
  echo "Python  : $( which python ) ($( python -V 2>&1 ))"
  echo "Elastiq : $elastiqRealBin"
  echo "Log dir : $elastiqLogFileDir"
}

# Entry point
case "$1" in

  start)
    start
    exit $?
  ;;

  stop)
    stop
    exit $?
  ;;

  status)
    status
    exit $?
  ;;

  restart)
    stop && start
    exit $?
  ;;

  log)
    status && tail -f "$elastiqLogFile"
    exit $?
  ;;

  console)
    enter_screen
    exit $?
  ;;

  conf)
    print_conf
    exit $?
  ;;

  *)
    echo "Usage: $Prog [start|stop|status|restart|log|console|conf]"
    exit 1
  ;;

esac
