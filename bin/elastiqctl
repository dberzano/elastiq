#!/bin/bash
#
# Author: Dario Berzano <dario.berzano@cern.ch> -- http://github.com/dberzano/virtual-analysis-facility
#
# elastiq:      Starts and stops the elastiq HTCondor queue monitor
#
# chkconfig: - 99 09
# description:  Control script for starting/stopping elastiq.py using \
#               proper environment. Requires Python 2.6.
#
### BEGIN INIT INFO
# Provides: elastiq
# Required-Start:
# Default-Stop: 0 1 6
# Short-Description: Starts and stops the elastiq HTCondor queue monitor
# Description:  Control script for starting/stopping elastiq.py.
### END INIT INFO

#
# Init
#

# Source function library.
[[ -e /lib/lsb/init-functions ]] && . /lib/lsb/init-functions

Prog=`readlink -e "$0"`
cd `dirname "$Prog"`
Prog=`basename "$0"`

# Find first existing file in the given list. Files support spaces in the name.
function FindFirst() (
  local F
  for F in "$@" ; do
    if [[ -r "$F" ]] ; then
      echo "$F"
      return 0
    fi
  done
  return 1
)

Lock='/var/lock/subsys/elastiq'

# Default control variables
if [[ `whoami` == 'root' ]] ; then
  export elastiqDefaultSysconfig=$( FindFirst '/etc/default/elastiq' '/etc/sysconfig/elastiq' )
  export elastiqDefaultLogFileDir='/var/log/elastiq'
  export elastiqDefaultConfFile='/etc/elastiq.conf'
  export elastiqDefaultStateFile='/var/lib/elastiq/state'
else
  export elastiqDefaultSysconfig="$HOME/.elastiq/startup.sh"
  export elastiqDefaultLogFileDir="$HOME/.elastiq/log"
  export elastiqDefaultConfFile="$HOME/.elastiq/elastiq.conf"
  export elastiqDefaultStateFile="$HOME/.elastiq/state"
fi

# Load environment (ignore error if not found)
[[ "$elastiqDefaultSysconfig" != '' ]] && source "$elastiqDefaultSysconfig" 2> /dev/null

export elastiqScreenName='__|elastiq|__'
export elastiqRealBin=$( FindFirst "$(which elastiq-real.py 2> /dev/null)" "$PWD/elastiq-real.py" '/usr/bin/elastiq-real.py' )
export elastiqLogFileDir=${elastiqLogFileDir:-$elastiqDefaultLogFileDir}  # defaults to syswide path
export elastiqLogFile="${elastiqLogFileDir}/elastiq.log"
export elastiqConfFile=${elastiqConfFile:-$elastiqDefaultConfFile}  # defaults to syswide file
export elastiqStateFile=${elastiqStateFile:-$elastiqDefaultStateFile}  # defaults to syswide path
export elastiqUser=${elastiqUser:-elastiq}  # defaults to 'elastiq'
export elastiqCommand="python $elastiqRealBin --logdir=$elastiqLogFileDir --config=$elastiqConfFile --statefile=$elastiqStateFile"

elastiqPythonPath="$(cd $PWD/../pylib 2> /dev/null && pwd)"
[[ -d $elastiqPythonPath ]] && export PYTHONPATH="${elastiqPythonPath}:${PYTHONPATH}"

# Permissions for logfile dir
mkdir -p "$elastiqLogFileDir" 2> /dev/null
chown "$elastiqUser" "$elastiqLogFileDir" 2> /dev/null
chmod 0770 "$elastiqLogFileDir" 2> /dev/null  # might contain sensitive data
touch "$elastiqLogFileDir"/.test 2> /dev/null
if [[ $? != 0 ]] ; then
  echo "Cannot access log directory $elastiqLogFileDir" >&2
  exit 3
fi
rm -f "$elastiqLogFileDir"/.test

# Permissions for statefile dir
mkdir -p $( dirname "$elastiqStateFile" ) 2> /dev/null
chown "$elastiqUser" "$elastiqStateFile" 2> /dev/null
chmod 0600 "$elastiqStateFile" 2> /dev/null


#
# Echo functions
#

# check if a shell function exists: returns 0 if it does, 1 if it does not
function function_exists() (
  declare -fF "$1" > /dev/null 2>&1
  return $?
)

# echo at the beginning of an action
function echo_begin() (
  if function_exists 'log_begin_msg' ; then
    log_begin_msg "$1"
  else
    echo -n "${1}:"
  fi
  return 0
)

# echo on success at the end of an action
function echo_success() (
  if function_exists 'log_success_msg' ; then
    log_success_msg "$1"
  else
    echo -e -n '\r'
    echo "${1}: OK"
  fi
  return 0
)

# echo on failure at the end of an action
function echo_failure() (
  if function_exists 'log_failure_msg' ; then
    log_failure_msg "$1"
  else
    echo -e -n '\r'
    echo "${1}: FAILED"
  fi
  return 0
)


#
# Functions
#

# Stop elastiq
function stop() {

  echo_begin "Stopping ${Prog}"

  local Signal='15'
  local LastMsg
  while true ; do
    LastMsg=`query_status` || break
    query_status 2> /dev/null  # for pid
    kill -$Signal $Pid 2> /dev/null
    sleep 1
    kill -0 $Pid 2> /dev/null && Signal=9
  done

  # Clean dangling screen
  screen -ls | grep -q "$elastiqScreenName" 2> /dev/null && \
    screen -S "$elastiqScreenName" -X quit
  screen -wipe > /dev/null 2>&1

  rm -f "$Lock"

  echo_success "Stopping ${Prog}: ${LastMsg}"

  return 0

}

# Echo status
function status() {
  local Rv LastMsg
  LastMsg=`query_status`
  Rv=$?
  if [[ $Rv == 0 ]] ; then
    echo_success "${LastMsg}"
    return 0
  else
    echo_failure "${LastMsg}"
    return 1
  fi
}

# Query status
function query_status() {
  local Out
  Out=$( ps -e -o pid,command | grep " ${elastiqCommand}$" | grep -v SCREEN )
  if [[ "$Out" == '' ]] ; then
    export Pid=''
    echo "$Prog not running"
    return 1
  else
    export Pid=$(echo $Out | awk '{ print $1 }')
    echo "$Prog running with PID $Pid"
    return 0
  fi
}

# Enter elastiq screen
function enter_screen() {
  local SN="$elastiqScreenName"
  if query_status ; then
    [[ $(whoami) != "$elastiqUser" ]] && SN="$elastiqUser/$SN"
    screen -r "$SN"
    return $?
  fi
  return 1
}

# Start elastiq
function start() {

  echo_begin "Starting ${Prog}"

  local Rv=0
  local LastMsg
  LastMsg=`query_status`
  if [[ $? != 0 ]] ; then

    # Switching to unprivileged
    if [[ `whoami` == 'root' ]] ; then
      Cmd="su $elastiqUser -s /bin/sh -c"
    else
      Cmd="/bin/sh -c"
    fi
    $Cmd "screen -dmS \"$elastiqScreenName\" /bin/sh -c \"$elastiqCommand 2> $elastiqLogFileDir/elastiq.err\"" #> /dev/null 2>&1
    $Cmd "screen -S \"$elastiqScreenName\" -X multiuser on"
    $Cmd "screen -S \"$elastiqScreenName\" -X acladd root"

    sleep 1
    LastMsg=`query_status`
    Rv=$?
  fi

  if [[ $Rv == 0 ]] ; then
    touch "$Lock" 2> /dev/null
    chown "$elastiqUser" "$Lock" 2> /dev/null
    echo_success "Starting ${Prog}: ${LastMsg}"
  else
    echo_failure "Starting ${Prog}: ${LastMsg}"
  fi

  return $Rv
}

# Print configuration
function print_conf() {
  echo "Python     : $( which python ) ($( python -V 2>&1 ))"
  echo "PYTHONPATH : ${PYTHONPATH}"
  echo "elastiq    : ${elastiqRealBin}"
  echo "log dir    : ${elastiqLogFileDir}"
  echo "conf       : ${elastiqConfFile}"
}

# Entry point
case "$1" in

  start)
    start
    exit $?
  ;;

  stop)
    stop
    exit $?
  ;;

  status)
    status
    exit $?
  ;;

  restart)
    stop && start
    exit $?
  ;;

  errlog)
    status
    rv=$?
    logerr="${elastiqLogFileDir}/elastiq.err"
    [[ -e "$logerr" ]] && cat "$logerr"
    exit $?
  ;;

  log)
    status
    [[ -e "$elastiqLogFile" ]] && tail -f "$elastiqLogFile"
    exit $?
  ;;

  console)
    enter_screen
    exit $?
  ;;

  conf)
    print_conf
    exit $?
  ;;

  *)
    echo "Usage: $Prog [start|stop|status|restart|log|errlog|console|conf]"
    exit 1
  ;;

esac
